/*!
Copyright 2018 Raising The Floor - US

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/GPII/universal/blob/master/LICENSE.txt
*/

"use strict";

var fluid = require("infusion");

var gpii = fluid.registerNamespace("gpii");
fluid.registerNamespace("gpii.migrations.tests");
fluid.registerNamespace("gpii.migrations.utils.tests");

var jqUnit = require("node-jqunit");

fluid.defaults("gpii.migrations.tests.simpleDocumentMigration", {
    gradeNames: ["gpii.migrations.couchDBmigration"],
    testFixtures: {
        beforeMigration: "%gpii-universal/gpii/node_modules/gpii-migrations/test/data/simpleMigrationDocumentsBeforeFixture.json",
        afterMigration: "@expand:fluid.module.resolvePath(%gpii-universal/gpii/node_modules/gpii-migrations/test/data/simpleMigrationDocumentsAfterFixture.json)"
    },
    mangoQuery: {
        "selector": {
            "schemaVersion": {
                "$eq": "0.1"
            },
            "type": "prefsSafe"
        }
    },
    invokers: {
        "processDocument": {
            funcName: "gpii.migrations.tests.simpleDocumentMigration.processDocument",
            args: ["{arguments}.0"]
        }
    }
});

gpii.migrations.tests.simpleDocumentMigration.processDocument = function (doc) {
    doc.schemaVersion = "0.2";
    delete doc.password;
    return doc;
};

fluid.defaults("gpii.tests.migrations.caseHolder", {
    gradeNames: ["fluid.test.testCaseHolder"],
    events: {
        createPreferencesService: null
    },
    components: {
        simpleDocumentMigration: {
            type: "gpii.migrations.tests.simpleDocumentMigration",
            createOnEvent: "createPreferencesService",
            options: {
                couchDbUri: "http://localhost:25984/gpii",
                bulk: false
            }
        },
        simpleBulkDocumentMigration: {
            type: "gpii.migrations.tests.simpleDocumentMigration",
            createOnEvent: "createPreferencesService",
            options: {
                couchDbUri: "http://localhost:25984/gpii",
                bulk: true
            }
        },
        preferencesService: {
            type: "gpii.preferencesServer.preferencesService",
            createOnEvent: "createPreferencesService",
            options: {
                gradeNames: ["gpii.tests.dbOperation.dbDataStore.base"],
                components: {
                    dataStore: {
                        type: "gpii.dbOperation.dbDataStore",
                        options: {
                            dataSourceConfig: {
                                baseUrl: "http://localhost",
                                port: 25984,
                                dbName: "gpii"
                            }
                        }
                    }
                }
            }
        }
    }
});

fluid.defaults("gpii.tests.migrations.createPreferencesService", {
    gradeNames: ["fluid.test.sequenceElement"],
    sequence: [{
        func: "{caseHolder}.events.createPreferencesService.fire"
    }]
});

fluid.defaults("gpii.tests.migrations.sequenceGrade", {
    gradeNames: ["fluid.test.sequence"],
    sequenceElements: {
        startCouch: {
            gradeNames: "gpii.test.startCouchSequence",
            priority: "before:sequence"
        },
        createPreferencesService: {
            gradeNames: "gpii.tests.migrations.createPreferencesService",
            priority: "after:startCouch"
        },
        stopCouch: {
            gradeNames: "gpii.test.stopCouchSequence",
            priority: "after:sequence"
        }
    }
});

fluid.defaults("gpii.tests.migrations.environment", {
    gradeNames: ["gpii.test.couchdb.environment.base"],
    databases: {
        gpii: {
            data: [
                "%gpii-migrations/test/data/simpleMigrationDocumentsBeforeFixture.json",
                "%gpii-universal/testData/dbData/views.json"
            ]
        }
    },
    components: {
        caseHolder: {
            type: "gpii.tests.migrations.caseHolder"
        }
    }
});

gpii.migrations.utils.tests.compareFixtures = function (expected, couchPayload, value) {
    jqUnit.assertEquals("Each object should be the same size", expected.length, value.length);
    fluid.each(expected, function (item) {
        var toCompare = fluid.find(value, function (el) {
            return el._id === item._id ? el : undefined;
        });
        delete toCompare._rev;
        jqUnit.assertDeepEq("Checking item", item, toCompare);
    });
};

gpii.migrations.utils.createBeforeAfterTests = function (that) {
    var migrationTypeName = that.typeName + ".beforeAfterTest";
    fluid.defaults(migrationTypeName, {
        gradeNames: ["gpii.tests.migrations.environment"],
        databases: {
            gpii: {
                data: [
                    that.options.testFixtures.beforeMigration,
                    "%gpii-universal/testData/dbData/views.json"
                ]
            }
        },
        components: {
            caseHolder: {
                type: "gpii.tests.migrations.caseHolder",
                options: {
                    components: {
                        migrationToTest: {
                            type: that.typeName,
                            createOnEvent: "createPreferencesService",
                            options: {
                                couchDbUri: "http://localhost:25984/gpii",
                                bulk: false
                            }
                        }
                    },
                    modules: [{
                        name: "Migration tests for : " + that.typeName,
                        tests: [
                            {
                                name: "Running before/after migration test.",
                                sequenceGrade: "gpii.tests.migrations.sequenceGrade",
                                sequence: [{
                                    task: "kettle.JSON.readFileSync",
                                    args: ["{migrationToTest}.options.testFixtures.afterMigration", "After fixtures"],
                                    resolve: "fluid.set",
                                    resolveArgs: ["{that}", ["afterFixture"], "{arguments}.0"]
                                }, {
                                    task: "fluid.promise.fireTransformEvent",
                                    args: "{migrationToTest}.events.continueMigration",
                                    reject: "jqUnit.assertDeepEq",
                                    rejectArgs: ["There should be no more to migrate.", {
                                        "message": "No more documents to migrate."
                                    },"{arguments}.0"]
                                }, {
                                    task: "gpii.migrations.mangoQuery",
                                    args: [{
                                        mangoQuery: {
                                            "selector": {
                                                "type": { "$exists": true }
                                            }
                                        },
                                        couchDbUri: "http://localhost:25984/gpii"
                                    }],
                                    resolve: "gpii.migrations.utils.tests.compareFixtures",
                                    resolveArgs: ["{that}.afterFixture", "{arguments}.0", "{arguments}.0.docs"]
                                }]
                            }
                        ]
                    }]
                }
            }
        }
    });
    return migrationTypeName;
};
