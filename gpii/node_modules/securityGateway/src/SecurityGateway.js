(function () {

    "use strict";
    var oauth2 = require("node-oauth").OAuth2; 
    var fluid = require("infusion");
    var path = require("path");
    var gpii = fluid.registerNamespace("gpii");
    fluid.registerNamespace("gpii.security"); 
    fluid.registerNamespace("gpii.securityGateway");

    /**
     * Check to see if user is fully authenticated to read/write needs and
     * preferences. If they are, return their internal GPII Unique Key. If
     * they are not, attempt to log in against the configured (OAuth) 
     * provider, creating a new user account entry if this is their first 
     * time in the system. If the provider... this may need to take a 
     * redirect url. Or just finish the request if they are not logged in.
     */
    gpii.security.obtainCurrentUser = function(request) {
        if (!request.req.session) {
            fluid.fail("Sessions need to be activated for this.");
        }
        if (!request.req.session.curUserGUK) {
            fluid.log("Not logged in, sending to OAuth provider.");
            var clientID = '22335bf7eff6b3765cfb';
            var clientSecret = 'feb944b4e263a2694b7e22c1b3672333faed301b';
            var oauth2 = new OAuth2(clientID,
                                    clientSecret,
                                   'https://github.com/',
                                   'login/oauth/authorize',
                                   'login/oauth/access_token',
                                   null); /** Custom headers */
            var authURL = oauth2.getAuthorizeUrl({
                redirect_uri: 'http://localhost:8080/code',
                scope: ['repo', 'user'],
                state: 'some random string to protect against cross-site request forgery attacks'
            });            
            request.res.redirect(authURL);
        } 
        else {
            return request.req.session.curUserGUK;
        }
    }

    fluid.defaults("kettle.requests.request.handler.verifyLogin", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        invokers: {
            handle: {
                funcName: "gpii.securityGateway.verifyLogin",
                args: ["{response}", "{request}","{requestProxy}"],
                dynamic: true
            }
        }
    });
    
    gpii.securityGateway.verifyLogin = function(res, req, reqProxy) {
        fluid.log("Inside verifyLogin");
    };

    /**
     * This Security Gateway Kettle app below will handle the redirects
     * that come back from OAuth and other authentication providers.
     */
    fluid.defaults("gpii.securityGateway", {
        gradeNames: ["kettle.app", "autoInit"],
        handlers: {
            verifyLogin: {
                route: "/verifylogin",
                type: "get",
                useSession: "existing"
            }
        },
        root: path.join(__dirname, "..")
    });

    fluid.defaults("gpii.securityGateway.dev", {
        gradeNames: ["autoInit", "fluid.littleComponent"],
        distributeOptions: {
            source: "{that}.options.urlExpanderGradeNames",
            target: "{that urlExpander}.options.gradeNames"
        },
        urlExpanderGradeNames: ["kettle.urlExpander.development"]
    });

})();
